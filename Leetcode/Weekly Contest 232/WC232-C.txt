class Solution {
public:
	struct item
	{
		int passes;
		int students;

		double gain;
		bool operator < (const item& rhs) const
		{
			return gain < rhs.gain;
		}
	};

	double maxAverageRatio(vector<vector<int>>& classes, int extraStudents) {
		priority_queue<item> pq;
		for (int i = 0; i < classes.size(); i++)
		{
			int x = classes[i][0];
			int y = classes[i][1];
			pq.push({ x, y, (double)(x + 1) / (double)(y + 1) - (double)x / (double)y });
		}

		while (extraStudents--)
		{
			item top = pq.top(); pq.pop();
			int x = top.passes + 1;
			int y = top.students + 1;
			pq.push({ x, y, (double)(x + 1) / (double)(y + 1) - (double)x / (double)y });
		}

		double ans = 0.0;
		while (!pq.empty())
		{
			item top = pq.top(); pq.pop();
			ans += (double)top.passes / (double)top.students;
		}
		ans /= (double)classes.size();
		return ans;
	}
};